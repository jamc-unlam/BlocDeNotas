/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package miBlockDeNotas;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Matias
 */
public class MiBlockDeNotas extends javax.swing.JFrame {

    // Variables Globales 
    boolean huboCambios = false;
    File archivoFile = null;
    /**
     * Creates new form MiBlockDeNotas
     */
    public MiBlockDeNotas() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        Menu = new javax.swing.JMenuBar();
        MenuArchivo = new javax.swing.JMenu();
        nuevoMenuItem = new javax.swing.JMenuItem();
        abrirMenuItem = new javax.swing.JMenuItem();
        guardarMenuItem = new javax.swing.JMenuItem();
        guardarComoMenuItem = new javax.swing.JMenuItem();
        salirMenuItem = new javax.swing.JMenuItem();
        MenuEditar = new javax.swing.JMenu();
        copiarMenuItem = new javax.swing.JMenuItem();
        cortarMenuItem = new javax.swing.JMenuItem();
        pegarMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textArea.setColumns(20);
        textArea.setRows(5);
        textArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textAreaKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(textArea);

        MenuArchivo.setText("Archivo");

        nuevoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        nuevoMenuItem.setText("Nuevo");
        nuevoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoMenuItemActionPerformed(evt);
            }
        });
        MenuArchivo.add(nuevoMenuItem);

        abrirMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        abrirMenuItem.setText("Abrir");
        abrirMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirMenuItemActionPerformed(evt);
            }
        });
        MenuArchivo.add(abrirMenuItem);

        guardarMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        guardarMenuItem.setText("Guardar");
        guardarMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarMenuItemActionPerformed(evt);
            }
        });
        MenuArchivo.add(guardarMenuItem);
        guardarMenuItem.getAccessibleContext().setAccessibleDescription("");

        guardarComoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        guardarComoMenuItem.setText("Guardar Como");
        guardarComoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarComoMenuItemActionPerformed(evt);
            }
        });
        MenuArchivo.add(guardarComoMenuItem);

        salirMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        salirMenuItem.setText("Salir");
        salirMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirMenuItemActionPerformed(evt);
            }
        });
        MenuArchivo.add(salirMenuItem);

        Menu.add(MenuArchivo);

        MenuEditar.setText("Editar");

        copiarMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copiarMenuItem.setText("Copiar");
        copiarMenuItem.setName("Copiar"); // NOI18N
        copiarMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copiarMenuItemActionPerformed(evt);
            }
        });
        MenuEditar.add(copiarMenuItem);

        cortarMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cortarMenuItem.setText("Cortar");
        cortarMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cortarMenuItemActionPerformed(evt);
            }
        });
        MenuEditar.add(cortarMenuItem);

        pegarMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pegarMenuItem.setText("Pegar");
        pegarMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pegarMenuItemActionPerformed(evt);
            }
        });
        MenuEditar.add(pegarMenuItem);

        Menu.add(MenuEditar);

        setJMenuBar(Menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nuevoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoMenuItemActionPerformed
        if(huboCambios)
        {
            int resp = JOptionPane.showOptionDialog(this, "¿Desea guardar los cambios?", "Hay cambios sin guardar", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, null, null);
            if(resp == JOptionPane.OK_OPTION)
                this.guardarMenuItem.doClick();
        }
        archivoFile=null;
        this.setTitle("");
        textArea.setText("");    
        huboCambios=false;    
    }//GEN-LAST:event_nuevoMenuItemActionPerformed

    private void pegarMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pegarMenuItemActionPerformed
        textArea.paste();
        huboCambios = true;
    }//GEN-LAST:event_pegarMenuItemActionPerformed

    private void abrirMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirMenuItemActionPerformed
        
        if(huboCambios)
        {
            int resp = JOptionPane.showOptionDialog(this, "¿Desea guardar los cambios?", "Hay cambios sin guardar", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, null, null);
            if(resp == JOptionPane.OK_OPTION)
                this.guardarMenuItem.doClick();
        }
        
        
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
        fileChooser.setFileFilter(filter);
        
        int resp = fileChooser.showOpenDialog(this);
        
        if(resp != JFileChooser.APPROVE_OPTION)
            return;
        
        archivoFile = fileChooser.getSelectedFile();
        
        FileReader archivoReader;
        
        try
        {
            archivoReader = new FileReader(archivoFile);
        }
        catch(FileNotFoundException ex)
        {
            Logger.getLogger(MiBlockDeNotas.class.getName()).log(Level.SEVERE,null,ex);
            return;
        }
        try
        {
            textArea.read(archivoReader, null);            
            this.setTitle(archivoFile.getAbsolutePath());
            huboCambios = false;
        }
        catch(IOException ex)
        {
            Logger.getLogger(MiBlockDeNotas.class.getName()).log(Level.SEVERE,null,ex);
        }
    }//GEN-LAST:event_abrirMenuItemActionPerformed

    private void guardarMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarMenuItemActionPerformed
        
        FileWriter archivoWriter;
        
        if(archivoFile == null)
        {
            JFileChooser fileChooser = new JFileChooser();
            FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
            fileChooser.setFileFilter(filter);
            int resp = fileChooser.showOpenDialog(this);

            if(resp != JFileChooser.APPROVE_OPTION)
                return;

            archivoFile = fileChooser.getSelectedFile();

            try
            {
                archivoWriter = new FileWriter(archivoFile+".txt");
            }
            catch(IOException ex)
            {
                Logger.getLogger(MiBlockDeNotas.class.getName()).log(Level.SEVERE,null,ex);
                return;
            }
        }
        else
        {
            try
            {
                archivoWriter = new FileWriter(archivoFile);
            }
            catch(IOException ex)
            {
                Logger.getLogger(MiBlockDeNotas.class.getName()).log(Level.SEVERE,null,ex);
                return;
            }
        }
        try
        {
            textArea.write(archivoWriter);
            this.setTitle(archivoFile.getAbsolutePath());
            huboCambios = false;
        }
        catch(IOException ex)
        {
            Logger.getLogger(MiBlockDeNotas.class.getName()).log(Level.SEVERE,null,ex);
        }
    }//GEN-LAST:event_guardarMenuItemActionPerformed

    private void guardarComoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarComoMenuItemActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("TEXT FILES", "txt", "text");
        fileChooser.setFileFilter(filter);
        
        int resp = fileChooser.showOpenDialog(this);
        
        if(resp != JFileChooser.APPROVE_OPTION)
            return;
        
        archivoFile = fileChooser.getSelectedFile();
        
        FileWriter archivoWriter;
        
        try
        {
            archivoWriter = new FileWriter(archivoFile+".txt");
        }
        catch(IOException ex)
        {
            Logger.getLogger(MiBlockDeNotas.class.getName()).log(Level.SEVERE,null,ex);
            return;
        }
        try
        {
            textArea.write(archivoWriter);
            this.setTitle(archivoFile.getAbsolutePath());
            huboCambios = false;
        }
        catch(IOException ex)
        {
            Logger.getLogger(MiBlockDeNotas.class.getName()).log(Level.SEVERE,null,ex);
        }
    }//GEN-LAST:event_guardarComoMenuItemActionPerformed

    private void salirMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirMenuItemActionPerformed
        if(huboCambios)
        {
            int resp = JOptionPane.showOptionDialog(this, "¿Desea guardar los cambios?", "Hay cambios sin guardar", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, null, null);
            if(resp == JOptionPane.OK_OPTION)
                this.guardarMenuItem.doClick();
        }
        System.exit(0);
    }//GEN-LAST:event_salirMenuItemActionPerformed

    private void copiarMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copiarMenuItemActionPerformed
        textArea.copy();
    }//GEN-LAST:event_copiarMenuItemActionPerformed

    private void cortarMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cortarMenuItemActionPerformed
        if(!textArea.getSelectedText().isEmpty())
        {
            textArea.cut();
            huboCambios = true;
        }
    }//GEN-LAST:event_cortarMenuItemActionPerformed

    private void textAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAreaKeyPressed
        huboCambios = true;
    }//GEN-LAST:event_textAreaKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MiBlockDeNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MiBlockDeNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MiBlockDeNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MiBlockDeNotas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MiBlockDeNotas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar Menu;
    private javax.swing.JMenu MenuArchivo;
    private javax.swing.JMenu MenuEditar;
    private javax.swing.JMenuItem abrirMenuItem;
    private javax.swing.JMenuItem copiarMenuItem;
    private javax.swing.JMenuItem cortarMenuItem;
    private javax.swing.JMenuItem guardarComoMenuItem;
    private javax.swing.JMenuItem guardarMenuItem;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem nuevoMenuItem;
    private javax.swing.JMenuItem pegarMenuItem;
    private javax.swing.JMenuItem salirMenuItem;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
